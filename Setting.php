<?php
/**
 * Created by PhpStorm.
 * User: quangthinh
 * Date: 7/20/2016
 * Time: 2:49 PM
 */

namespace quangthinh\yii\setting;


use quangthinh\yii\theme\Module;
use Yii;
use yii\base\Application;
use yii\base\BootstrapInterface;
use yii\base\Component;
use yii\db\Connection;
use yii\db\Query;

class Setting extends Component implements \ArrayAccess
{
    private $cache;

    /**
     * @var array|string|Connection
     */
    public $db = 'db';

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        if (is_array($this->db)) {
            $this->db = Yii::createObject($this->db);
        } else if (is_string($this->db)) {
            $this->db = Yii::$app->get($this->db);
        }
    }

    /**
     * Whether a offset exists
     * @link http://php.net/manual/en/arrayaccess.offsetexists.php
     * @param mixed $offset <p>
     * An offset to check for.
     * </p>
     * @return boolean true on success or false on failure.
     * </p>
     * <p>
     * The return value will be casted to boolean if non-boolean was returned.
     * @since 5.0.0
     */
    public function offsetExists($offset)
    {
        if (strpos($offset, '.') === false) {
            $offset = 'global.' . $offset;
        }

        list($section, $key) = explode('.', $offset, 2);
        return $this
        ->db
        ->createCommand('select 1 from {{%setting}} where section=:s and key=:k',
         ['s' => $section, 'k' => $key])
            ->queryScalar();
    }

    /**
     * Offset to retrieve
     * @link http://php.net/manual/en/arrayaccess.offsetget.php
     * @param mixed $offset <p>
     * The offset to retrieve.
     * </p>
     * @return mixed Can return all value types.
     * @since 5.0.0
     */
    public function offsetGet($offset)
    {
        if (strpos($offset, '.') === false) {
            $offset = 'global.' . $offset;
        }

        list($section, $key) = explode('.', $offset, 2);

        $raw = (new Query())
            ->select('data')
            ->from('{{%setting}}')
            ->where(['section' => $section, 'key' => $key])
            ->scalar($this->db);

        return unserialize($raw);
    }

    public function update($section, $key, $value, $cache = true)
    {
        $offset = $section . '.' . $key;
        if ($this->offsetExists($offset)) {
            $this->db->createCommand()
                ->update('{{%setting}}', [
                    'data' => serialize($value),
                    'cache' => $cache,
                ],[
                    'section' => $section,
                    'key' => $key,
                ]);
        } else {
            $this->db->createCommand()
                ->insert('{{%setting}}', [
                    'section' => $section,
                    'key' => $key,
                    'cache' => $cache,
                    'data' => serialize($value),
                ]);
        }
    }

    /**
     * Offset to set
     * @link http://php.net/manual/en/arrayaccess.offsetset.php
     * @param mixed $offset <p>
     * The offset to assign the value to.
     * </p>
     * @param mixed $value <p>
     * The value to set.
     * </p>
     * @return void
     * @since 5.0.0
     */
    public function offsetSet($offset, $value)
    {
        list($section, $key) = explode('.', $offset, 2);
        $this->update($section, $key, $value, true);
    }

    /**
     * Offset to unset
     * @link http://php.net/manual/en/arrayaccess.offsetunset.php
     * @param mixed $offset <p>
     * The offset to unset.
     * </p>
     * @return void
     * @since 5.0.0
     */
    public function offsetUnset($offset)
    {
        list($section, $key) = explode('.', $offset, 2);

        $this->db->createCommand()
            ->delete('{{%setting}}', [
                'section' => $section,
                'key' => $key,
            ]);
    }
}